# -*- coding: utf-8 -*-
"""raman_book2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rmCW7uQV6uB2c2MN_HNIBWmvGj-9Pk5I
"""

# -*- coding: utf-8 -*-
"""Raman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jzjJfveHHrHGLVkGU2uoqUydBxaen0N_
"""

#Importing the library

import pandas as pd

# Importing the dataset
df = pd.read_excel('/content/m.xlsx')

df.head()

df.tail()

#Homework
#std and mean of Attack 	Defense 	Sp. Atk 	Sp. Def 	Speed sepaarately and also by adding together

#Standard Deviation
std_attack = df['Attack'].std()
print(std_attack)

std_defense = df['Defense'].std()
print(std_defense)

std_speed = df['Speed'].std()
print(std_speed)

std_SpAtk = df['SpAtk'].std()
print(std_SpAtk)

std_SpDef = df['SpDef'].std()
print(std_SpDef)

total_std = (df['Attack']+df['Defense']+df['Speed']+df['SpAtk']+df['SpDef']).std()
print(total_std)

from numpy.ma.core import mean
# mean
mean_attack=df['Attack'].mean()
print(mean_attack)

mean_defense=df['Defense'].mean()
print(mean_defense)

mean_speed=df['Speed'].mean()
print(mean_speed)

mean_spatk=df['SpAtk'].mean()
print(mean_spatk)

mean_spdef=df['SpDef'].mean()
print(mean_spdef)

mean_total=(df['Attack']+df['Defense']+df['Speed']+df['SpAtk']+df['SpDef']).mean()
print(mean_total)

df['HP']

!pip3 install numpy

import numpy as np

a = np.empty((3,2,1))
a

#creating a numpy empty array
np.empty((1))

# numpy zeros array
np.zeros((3,2,1))

#generating an array from range 2-10
a = np.arange(2,10)
type(a)

#using linespace function to generate numbers from 1 to 10 with a difference of 2.25
np.linspace(1,10,5)

np.linspace(1,10)

np.logspace(1,10)

#random() functiob to generate random numbers
np.random.rand(2,2,2)

#random.randint() function to generate random integers
d = np.random.randint(0,10,size = (5,5))

d

d[:,:]



#answer for to-do task
d[2:4,2:4]

d[2:5,1:3]

d[:,2]

d[2,:]

1.18367347 - 1.0

1.36734694 - 1.18367347

3.25 - 1.00

5.5 -3.25

10.20408163 - 10.0

10.40816327 - 10.20408163

a = np.random.randint(0,10,size = (5,5))

b = np.random.randint(0,10,size = (5,5))

print(a)

print(b)

# vertical stacking of an array
np.vstack([a,b])

# horizontal stacking of arrays
np.hstack([a,b])

d

#vertical splitting of arrays
d1,d2 = np.vsplit(d,[1])



d1

d2

#ndim is used to know about the array dimension
d.ndim

#to know about the shape of an array
d.shape

d.size

d.reshape(25,1)

d.reshape(1,25)

#reshaping of any dimension array into 2-D array
d.reshape(-1,1)

a = np.array([(1,2,3),(4,5,6)])

a

import time
import sys

s = range(1000)
print(sys.getsizeof(5)*len(s))

D = np.arange(1000)

print(D.size*D.itemsize)

a.sum(axis = 0)

# taking squar root of an array
np.sqrt(a)

# standard deviation
np.std(a)

#mean
np.mean(a)

b = np.array([(7,8,9),(1,2,3)])

a

b

#adding two arrays
print(a+b)

#product of two arrays
print(a*b)

#creating a 1-D array
a.ravel()

"""DAY :10 MATPLOTLIB"""

!pip3 install matplotlib

#line plot
import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,20,30,40,50]
plt.plot(x,y)
plt.xlabel("Item")
plt.ylabel("Prices")
plt.title("Graph for items vs prices")
plt.show()
plt.savefig('a.png')

x=[1,2,3]
y=[10,20,12]

x1=[4,5,6]
y1=[11,34,56]
#plotting (*) instead of lines

plt.plot(x,y,'*',Label="1st line")
plt.plot(x1,y1,Label="2nd line")
plt.grid()
plt.legend()
plt.show()

# Graph of sin(x)
x = np.arange(0,3*np.pi,0.1)
y = np.sin(x)
plt.plot(x,y)
plt.show()

# line plot
x = [2017,2018,2019,2020,2021]
y = [432,341,234,345,363]
plt.plot(x,y)

#plotting and saving the graph
years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
plt.plot(years,pops, color = 'red')
plt.ylabel("population in billions")
plt.xlabel('Population Growth by year')
plt.title('Population Growth')
plt.savefig('a.png')

#plotting the graphs with legends for graph information
x = [1,6,3]
y = [5,9,4]

x2 = [1,2,3]
y2 = [10,14,12]

plt.plot(x,y,label = 'First line')
plt.plot(x2,y2, label = 'Second Line')
plt.xlabel('PLot Nummber')
plt.ylabel('Important var')
plt.title('Interesting Graph!')
plt.legend()

#replacing the line graph with a dot graph for better visualization
years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
plt.plot(years,pops,'.',color = 'orange',label = 'Birth by year')
plt.plot(years,death,color = 'blue',label = 'Death by year')
plt.ylabel("Population in billions")
plt.xlabel('Population stat by year')
plt.title('Population Growth')
plt.legend()

#plotting with grid and marker
years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
lines = plt.plot(years,pops,years,death)
plt.grid()
plt.setp(lines,color = 'green',marker = '*')

#PIE CHART
labels = ['Python','C','C#','PHP','Java','Ruby']
sizes = [33,52,12,17,42,48]
plt.pie(sizes, labels = labels,autopct = '%1.1f%%')
plt.axis('equal')

# to-do task
import pandas as pd
raw_data = {'names':['Nick','Sani','John','Rubi','Maya'],
            'jan_ir':[123,124,125,126,128],
            'feb_ir':[23,24,25,27,29],
            'March_ir':[3,5,7,6,9]}
df = pd.DataFrame(raw_data,columns = ['names','jan_ir','feb_ir','March_ir'])
df

df['total_ir']=df['jan_ir']+df['feb_ir']+df['March_ir']
print(df)
total_ir = df['total_ir'].values
names=df['names'].values
plt.pie(total_ir, labels =names ,autopct = '%1.1f%%')
plt.axis('equal')

import numpy as np
import matplotlib.pyplot as plt

#bar plot
korea_scores = (554,536,538)
canada_scores = (518,523,525)
china_scores = (413,570,580)
france_scores = (495,505,499)
index = np.arange(3)
bar_width = 0.2
k1 = plt.bar(index,korea_scores,bar_width,alpha = 0.9,label = 'korea')
c1 = plt.bar(index+bar_width,canada_scores,bar_width,alpha = 0.9,label = 'Canada')
ch1 = plt.bar(index+bar_width*2,china_scores,bar_width,alpha = 0.9,label = 'China')
f1 = plt.bar(index+bar_width*3,france_scores,bar_width,alpha = 0.9,label = 'France')
plt.xticks(index + 0.3,('Maths','Reading','Science'))
plt.ylabel('Mean scores in PISA 2021')
plt.xlabel('Subjects')
plt.title('Test scores by Country')
plt.grid(True)
plt.legend()

# bar plot
plt.bar([1,3,5,7,9],[5,2,7,8,2], label = 'Example one')
plt.bar([2,34,6,8,10],[8,6,2,5,6],label = 'Example two',color = 'green')
plt.legend()
plt.ylabel('bar width')
plt.xlabel('Bar Number')
plt.title('Epic Graph')

# creating bins and plotting histogram
population_ages = [12,34,31,23,122,15,145,543,135,135,134,351,63,24,72,151,63,24,62,31]
bins = [10,20,30,40,50,60,70,80,90,100,110,120,130,140]
plt.hist(population_ages,bins,color = 'red')

#scatter plot
x = [1,2,3,4,5,6,7,8]
y = [5,2,4,2,1,4,5,2]
plt.scatter(x,y,label = 'Scatter plot',color = 'r')
plt.ylabel('y')
plt.xlabel('x')
plt.title('Interesting Graph')
plt.legend()

# Stackplot
days = [1,2,3,4,5]
sleeping = [7,8,6,11,7]
eating = [2,3,4,3,2]
working = [7,8,7,2,2]
playing = [4,5,3,2,1]
plt.stackplot(days,sleeping,eating,working,playing,colors = ['m','c','r','k'])

# Line 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.plot(x,y,z,c = 'g',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# scatter 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.scatter(x,y,z,c = 'g',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# bar 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = np.zeros(10)

dx = np.ones(10)
dy = np.ones(10)
dz = [1,2,3,4,5,6,7,8,9,10]

ax1.bar3d(x,y,z,dx,dy,dz)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# wireframe
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x,y,z = axes3d.get_test_data()
ax1.plot_wireframe(x,y,z,rstride = 3,cstride = 3)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

"""class_12 date:18/03/2022"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('/content/telecom_churn.csv')
data.head()

data.tail()

data.columns

data.shape

data.info()

data['Churn'] = data['Churn'].astype('int64')
data['Churn']

data.describe

data.describe(include = ['object','bool'])

data['Churn'].value_counts()

data['Churn'].value_counts(normalize = True)

data.sort_values(by = 'Total day charge', ascending = False).tail()

data.sort_values(by = ['Total day charge','Churn'], ascending = [False,True]).head()

data[data['Churn'] == 1].mean()

data[(data['Churn'] == 0) & (data['Voice mail plan'] == 'No')]['Number vmail messages'].max()

data.loc[0:5,'State':'Area code']

# using iloc access these column and 15 rows
#0:5 rows| / 8:15 columns----
#Total day charge - Total intl charge 
data.iloc[0:5,8:15]

#before
data[:2]

data.apply(np.max)