# -*- coding: utf-8 -*-
"""Raman_book1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NpKJH0NMn6n-AFetWPRhmCtUFL1mZMvP

**# Day - 1**

Data types
"""

# Integer
# Pre-defined functions

type(1)

# do this 
#write the value 12.4 and tell me the output
type(12.4)

type('string')

type("string")

# To - do 
type('2')

type(1j + 2)

#List
type([1,2,3,4,4,5,6])

# TO do
# Make a list and tuple mentioning each data type
t = (1,1.1,12345,"raman")
print(t)

# Tuple
type((1,2,34,5,6))

#Dictionary
#Expression - {key:value, key1:value1}

a={'Name':'Raju', 'Roll_no': 234, 'Age':26, 'Address':'fwkjgfiygku'}
print(a)

type({'Name':'Raju', 'Roll_no': 234, 'Age':26, 'Address':'fwkjgfiygku'})

#Make a dictionary adding your Name and your basic details

#Print function
print("Hello my name is Prachi Tare and I will be the mentor to this session.")

print(1)

# To do 
# You have to print the type of the data and store it.
# MVP should be realistic rather than idealistic. It should be conservative rather than ambitious. If all else fails, knowing that you achieve your MVP is a huge accomplishment.

# Variables and identifiers
str1 = 'Hello my name is Prachi Tare and I will be the mentor to this session'

str1

"""### Data operators - """

34 * 65

a = 20
b = 5

# Multiplication
print(a*b)
# subtraction
print(a-b)
# Floor division 
print(a//b)
# Division 
print(a/b)
# Addition
print(a+b)

# Exponention
print(a**b)



"""Relation operator"""

34 == 25

34>45

34<45

34!=45

"""Assignment operators"""

x = 12

x+=2
print(x)

x*=3

print(x)

"""# Python Logical Operators

1. And
2. Or
3. Not
"""

#and operators
23<45 and 49 != 49 and 2 == 2

# Or operator
23<45 or 49 != 49 or 2 == 2

'prachi' == 'Prachi'

# not operator

not('prachi' == 'Prachi')

"""What are sequences in Python 

Squences are containers with items that are accessible by the indexing or string.

1. Concatenation
2. Repetation.
3. Membership Testing
4. Slicing
5. Indexing
"""

#Manipulation of list 

# TO Do 
# You have to make your own list ( all the items are integers)
li=[12,3,4,5,6,6,7,8,4,5,6,7,4,4,3,5,6,7,89,4]

#append function
li.append(999)
print(li)

#insert function
li.insert(2,888)
print(li)

#extend function
li1 = [333,222]
li.extend(li1)
print(li)

#count function
print(li.count(4))

#indexing
print(li.index(5))

#min function
print(min(li))

#max function
print(max(li))

#pop function
print(li.pop())
print(li.pop(7))

#delete function
del li[0]
print(li)

# Append 

ap = [1,2,3,4,5]
ap.append(10)
print(ap)

# Insert 
ins = [4,5,6,2,8]
ins.insert(4,12)
print(ins)

# to -do 
#You have to insert 37 in 8th index and 2 in 12th index and 5 in 1000 index
li = [4, 8, 9, 10, 34, 1, 2, 3, 4, 15, 6, 7, 4, 8, 9, 10, 34]
li.insert(8,37)
print(li)
li.insert(12,2)
print(li)
li.insert(5,1000)
print(li)

# Extend Function 
ex1 = [1,2,3,4,5,6,7]
ex2 = [4,8,9,10,34]
ex1.extend(ex2)
ex2.extend(ex1)
print("Extended list afer adding ex2",ex1)
print("Extended list afer adding ex1",ex2)

# Sum

print(sum(ex2))

# Count 

count1 = [1,4,6,87,2,2,7,1,6,8,9,3,3,2,1,6,7,9,3,1,6,3,4532,31,53,637,48,4,3,52,6,95,45,5,638,2,2,56]
print(count1.count(2))

# Indexing

In = [6,7,8,9,2,3,4,1]
In.index(3)

In[3]

In[3:8]

min(In)

dc = [3.4,3.6,.3,6.2,2.5,2.45,2.6,.74,4.78,345.7,4.6]

min(dc)

# max

print('mac of dc is',max(dc))

pop1 = [1,2,3,4,5,6,7,8,9]

pop1.pop(4)
print(pop1)
print(a)

pop1.pop()

delete = [2,3,4,5]
del delete[2]

delete

# Remove 
remove1 = [2.3,4,3,8,17]
b = remove1.remove(4)
print(remove1)
print(b)

x = 23
y = 9
"""
temp = x
x = y
y = temp
print(x)
print(y)
"""
x,y = y,x
print(x)
print(y)

"""String"""

name = 'dlitHe Institute'
course = 'Python certification'

name.capitalize()

name.count("i")

name.find("u")

name.isalpha()

name.islower()

name.isupper()

name.lower()

name.upper()

name.strip()

a = "Python is a programming language"
a.split("is")

b = "Python"
c = "language"

b + " "+ c

a*3

str1 = 'Hello to the kingdom'

len(str1)

str1[3]

str1[9:12]

str1.replace('the','a')



"""# DAY_3 : Tuples, Dictionary and if-else conditions"""

#INDEXING
tp = (1,2,3,4,5,6,7,8,9)
tp[1]

#printing the values in a range from tuple
tp[1:3]

#CONCATETATION
t1=(1,2,3)
t2=(4,5,6)
t3=t1+t2
print(t3)

#TO_DO
tup=("HELLO WORLD")
print(tup)

#DICTIONARY
dic ={"NAME":"RAMAN","AGE":23}

#deleting the key-value pair
del dic["NAME"]

print(dic)

#adding key value pair in pre-exesting dictionary
dic ["NUMBER"] = 3456

dic ["NAME"] = "Manish"

print(dic)

#popping out the key from a dictionary
dic.pop("AGE")

#creating the dictionary using dict() function
temp = dict(Brand="Apple",Model="s-series",year=2021)

print(temp)

print(dic)

#copying the key-value pair from one dictionary to other
cp = dict(temp)
print(cp)

#accessing the key
cp["year"]

#nested dictionary
di = {'dict1':{1:"get"},'dict2':{1:"post"}}
print(di)

#accessing the sub-dictionary
di["dict1"][1]

"""IF AND ELSE CONDITION"""

#if and else condition
# these are dicision making statements which decide if some block of codes to be executed depending on
# the provided condition
a=int(input())
if a==1:
  print("hello")
else:
  print("hi")

#to-do

string = 'parade'
if string == 'parade':
  print("hello")
  """ string = string*3 (it will show an error namely "unexpected indent")
    print(string)"""
  #correct code will be
  string=string*3
  print(string)
  # in above code identation needed to be corrected in if block

#nested if-else
"""when input is given greater and equal to 5 then the outer if condition will be executed. if a>=6 then raman
will be printed.like wise statement will be printed on basis of given condition.if no condition is true then
else block will be executed."""
a=int(input())
if a>=5:
  if a>=6:
    print("raman")
  if a==7:
    print("kishan")
  if a<6:
    print("sameer")
else:
  print("hello all")

"""DAY-4 : loops and if-elif-else"""

#if else statements
if(confition):
  statement
elif(condition):
  statement
else:
  statement

i=int(input())
if i==20:
  print("i is equal to 20")
elif i>=20:
  print("give 20 as input")
else:
  print("hello")

# short-hand if statement
i=10
if i==10:print("i is 10")

#to-do
#short hand if-else short hand code
#short hand codes reduces the complexity of code
i=int(input())
if i==10:print("i is 10")
else:print("i is not equal to 10")

"""#LOOPS

Repetitive execution of the same block of code over and over is referred to as iteration.
"""

#for loops
li = [1,2,3,4,5]
for i in li:
  print(i)

#for loops using strings
li = ["raman","kishan","sameer"]
for i in li:
  print(i)

#iterating caharacters of strings from list
li = ["raman","kishan","sameer"]
for i in li:
  for j in i:
    print(j)

#to-do replace banana to mushroom and print the new list
li = ["apple","mango","banana",]
li1 = [sub.replace("banana","mushroom") for sub in li]
print(li1)

#input function
s = input()
print(s)

#string input
s=str(input())
for i in s:
  print(i)

#print key-valur pair of dictionary
d = dict()
d['a'] = 123
d['b'] = 514
for i in d:
  print(i,d[i])

#break keyword : when the condition gets ture. it will come out of the for loop
for letter in 'whenareyouold':
  if letter == 'e' or letter == 'r':
    break
  print(letter)

#pass keyword : its a null operation nothing happens when it gets executed.
#it makes the control to passby without executing the code
for letter in 'whenareyouold':
  if letter == 'e' or letter == 'r':
    pass
  print(letter)

#continue keyword : continue statement is a loop control statement that forces to execute the next
#iteration of loop
for letter in 'whenareyouold':
  if letter == 'e' or letter == 'r':
    continue
  print(letter)

#taking list as input
li = list(input())
print(li)

#taking tuple as input
tup = tuple(input())
print(tup)

#Range in loops
#list(range(starting point, ending point, iteration))
list(range(1,10,1))

#printing alternate number in list
list(range(1,10,2))

#using the argument "end" to formate our output in print statement
l = [10,20,30,40]
for i in range(len(l)):
  print(l[i], end = "\t")

#to-do sum of first 10 number
sum=0
for n in range(1,10):
  sum=sum+n
print(sum)

#while loop
"""while(condition):
  statement"""

i=0
while i<2:
  i+=1
  print("hello")

#using pop fubction in while loop
a = [1,2,3,4]
while a:
  print(a.pop())

#using continue keyword with while loop
i = 0
a = 'helloworld'
while i<len(a):
  if a[i] == 'e':
    i+=1
    continue
  print('current letter',a[i])
  i +=1

#pass keyword with while loop
i = 0
a = 'helloworld'
while i<len(a):
  if a[i] == 'e':
    i+=1
    pass
  print('current letter',a[i])
  i +=1

#break keyword with while loop
i = 0
a = 'helloworld'
while i<len(a):
  if a[i] == 'e':
    i+=1
    break
  print('current letter',a[i])
  i +=1

"""# DAY-5 : How to zip things?
#lambda,map,function definaton and calling
"""

# Zip coding
questions = ['name','color','shape']
answers = ['apple','red','a circle']
for questions,answers in zip(questions,answers):
  print('what is your {0}? I am {1}.'.format(questions,answers))

#map function
#user defined function
def add(n):
  return n+n
numbers = (1,2,3,4)
res = map(add,numbers)
print(list(res))

#function
"""
def square():    ->function defination
  statement
square(4)    ->function calling
"""
def square(num):
  num=num**2
  print(num)
square(4)

# checking even odd
def eo(x):
  if (x%2 == 0):
    print('even')
  else:
    print('odd')
eo(4)

# function defination with lembda keyword
def db(n):
  return lambda x:x*n

num_double = db(3)
print(num_double(13))

#lambda function : A lambda function is a small anonymous function. 
#A lambda function can take any number of arguments, but can only have one expression
x = lambda a: a + 10
print(x(5))

# to-do
#remove strings from an list and then provide the sum of all element in the list
li = [1,2,6,3,6.4,35.2,'ab',3.5,6,'world',3,4.6,3.3,'city',6,3,2,6,34]
li.remove("ab")
li.remove("world")
li.remove("city")
print(li)
res = sum(li)
print("sum of the elements in the list, li=",res)

#seperate operator
print('8','2','2022',sep='-')